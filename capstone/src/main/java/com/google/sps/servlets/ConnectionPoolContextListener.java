/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.sps.servlets;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;
import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;
import javax.sql.DataSource;

@WebListener(
  "Creates a connection pool that is stored in the Servlet's context for later use."
)
public class ConnectionPoolContextListener implements ServletContextListener {
  // Saving credentials in environment variables is convenient, but not secure - consider a more
  // secure solution such as https://cloud.google.com/kms/ to help keep secrets safe.
  private static final String CLOUD_SQL_CONNECTION_NAME = System.getenv(
    "CLOUD_SQL_CONNECTION_NAME"
  );
  private static final String DB_USER = System.getenv("DB_USER");
  private static final String DB_PASS = System.getenv("DB_PASS");
  private static final String DB_NAME = System.getenv("DB_NAME");

  private static final String UNIVERSITY_TABLE_SQL_STATEMENT =
    "CREATE TABLE university( " +
    "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
    "name TEXT," +
    "state TEXT);";

  private static final String USER_INFO_TABLE_SQL_STATEMENT =
    "CREATE TABLE user_info(" +
    "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
    "user_name TEXT," +
    "full_name TEXT," +
    "email TEXT," +
    "verified BOOLEAN," +
    "university_id INT REFERENCES university(id));";

  private static final String STUDY_SET_TABLE_SQL_STATEMENT =
    "CREATE TABLE study_set(" +
    "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
    "owner_id INT REFERENCES user_info(id)," +
    "title TEXT," +
    "subject TEXT," +
    "description TEXT," +
    "university_id INT REFERENCES university(id)," +
    "professor TEXT," +
    "academic_time_period TEXT," +
    "course_name TEXT," +
    "creation_time TIMESTAMP," +
    "update_time TIMESTAMP);";

  private static final String CARD_TABLE_SQL_STATEMENT =
    "CREATE TABLE card(" +
    "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
    "study_set_id INT REFERENCES study_set(id)," +
    "front TEXT," +
    "back TEXT);";

  private DataSource createConnectionPool() {
    HikariConfig dbConfig = new HikariConfig();

    dbConfig.setJdbcUrl(String.format("jdbc:postgresql:///%s", DB_NAME));
    dbConfig.setUsername(DB_USER); // e.g. "root", "postgres"
    dbConfig.setPassword(DB_PASS); // e.g. "my-password"

    // For Java users, the Cloud SQL JDBC Socket Factory can provide authenticated connections.
    // See https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory for details.
    dbConfig.addDataSourceProperty(
      "socketFactory",
      "com.google.cloud.sql.postgres.SocketFactory"
    );

    dbConfig.addDataSourceProperty(
      "cloudSqlInstance",
      CLOUD_SQL_CONNECTION_NAME
    );

    // ... For future reference, one can also specify additional connection properties here.

    DataSource pool = new HikariDataSource(dbConfig);
    return pool;
  }


  private void createUniversityTable(Connection conn) throws SQLException {
    try (
      PreparedStatement createTableStatement = conn.prepareStatement(
        UNIVERSITY_TABLE_SQL_STATEMENT
      )
    ) {
      createTableStatement.execute();
    }
  }

  private void createUserInfoTable(Connection conn) throws SQLException {
    try (
      PreparedStatement createTableStatement = conn.prepareStatement(
        USER_INFO_TABLE_SQL_STATEMENT
      )
    ) {
      createTableStatement.execute();
    }
  }

  private void createStudySetTable(Connection conn) throws SQLException {
    try (
      PreparedStatement createTableStatement = conn.prepareStatement(
        STUDY_SET_TABLE_SQL_STATEMENT
      )
    ) {
      createTableStatement.execute();
    }
  }

  private void createCardTable(Connection conn) throws SQLException {
    try (
      PreparedStatement createTableStatement = conn.prepareStatement(
        CARD_TABLE_SQL_STATEMENT
      )
    ) {
      createTableStatement.execute();
    }
  }

  @Override
  public void contextDestroyed(ServletContextEvent event) {
    // This function is called when the Servlet is destroyed.
    HikariDataSource pool = (HikariDataSource) event
      .getServletContext()
      .getAttribute("my-pool");
    if (pool != null) {
      pool.close();
    }
  }

  @Override
  public void contextInitialized(ServletContextEvent event) {
    // This function is called when the application starts and will safely create a connection pool
    // that can be used to connect to.
    ServletContext servletContext = event.getServletContext();

    DataSource pool = (DataSource) servletContext.getAttribute("my-pool");
    if (pool == null) {
      pool = createConnectionPool();

      servletContext.setAttribute("my-pool", pool);
    }

    Connection conn;
    DatabaseMetaData dbm;
    try {
      conn = pool.getConnection();
      dbm = conn.getMetaData();
    } catch (SQLException ex) {
      throw new RuntimeException("Unable to verify Connection", ex);
    }

    try {
      ResultSet tables = dbm.getTables(null, null, "university", null);
      if (!tables.next()) {
        createUniversityTable(conn);
        UniversityTable uniTable = new UniversityTable();
        uniTable.addTable(servletContext);
      }
    } catch (SQLException ex) {
      throw new RuntimeException(
        "Unable to verify the university table schema. Please double check the steps" +
        "in the README, your table declaration method  and try again.",
        ex
      );
    } catch (FileNotFoundException ep) {}

    try {
      ResultSet tables = dbm.getTables(null, null, "user_info", null);
      if (!tables.next()) {
        createUserInfoTable(conn);
      }
    } catch (SQLException ex) {
      throw new RuntimeException(
        "Unable to verify the user_info table schema. Please double check the steps" +
        "in the README, your table declaration method  and try again.",
        ex
      );
    }

    try {
      ResultSet tables = dbm.getTables(null, null, "study_set", null);
      if (!tables.next()) {
        createStudySetTable(conn);
      }
    } catch (SQLException ex) {
      throw new RuntimeException(
        "Unable to verify the study_set table schema. Please double check the steps" +
        "in the README, your table declaration method  and try again.",
        ex
      );
    }

    try {
      ResultSet tables = dbm.getTables(null, null, "card", null);
      if (!tables.next()) {
        createCardTable(conn);
      }
    } catch (SQLException ex) {
      throw new RuntimeException(
        "Unable to verify the card table schema. Please double check the steps" +
        "in the README, your table declaration method  and try again.",
        ex
      );
    }
  }
}
