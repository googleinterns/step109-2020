/*
 * Copyright 2018 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.sps.servlets;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.servlet.ServletContext;
import javax.servlet.ServletContextEvent;
import javax.servlet.ServletContextListener;
import javax.servlet.annotation.WebListener;
import javax.sql.DataSource;

@WebListener("Creates a connection pool that is stored in the Servlet's context for later use.")
public class ConnectionPoolContextListener implements ServletContextListener {

    // Saving credentials in environment variables is convenient, but not secure - consider a more
    // secure solution such as https://cloud.google.com/kms/ to help keep secrets safe.
    private static final String CLOUD_SQL_CONNECTION_NAME = System.getenv("CLOUD_SQL_CONNECTION_NAME");
    private static final String DB_USER = System.getenv("DB_USER");
    private static final String DB_PASS = System.getenv("DB_PASS");
    private static final String DB_NAME = System.getenv("DB_NAME");

    private DataSource createConnectionPool() {
        // [START cloud_sql_postgres_servlet_create]
        // The configuration object specifies behaviors for the connection pool.
        HikariConfig config = new HikariConfig();

        // Configure which instance and what database user to connect with.
        config.setJdbcUrl(String.format("jdbc:postgresql:///%s", DB_NAME));
        config.setUsername(DB_USER); // e.g. "root", "postgres"
        config.setPassword(DB_PASS); // e.g. "my-password"

        // For Java users, the Cloud SQL JDBC Socket Factory can provide authenticated connections.
        // See https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory for details.
        config.addDataSourceProperty("socketFactory", "com.google.cloud.sql.postgres.SocketFactory");
        config.addDataSourceProperty("cloudSqlInstance", CLOUD_SQL_CONNECTION_NAME);

        // ... For future reference, one can also specify additional connection properties here.

        // Initialize the connection pool using the configuration object.
        DataSource pool = new HikariDataSource(config);
        // [END cloud_sql_postgres_servlet_create]
        return pool;
    }

    private void createUniversityTable(DataSource pool) throws SQLException {
        // Safely attempts to create the university table schema.
        try (Connection conn = pool.getConnection()) {
            String stmt =
                "CREATE TABLE IF NOT EXISTS university ( "
                    + "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name TEXT, state TEXT );";
            try (PreparedStatement createTableStatement = conn.prepareStatement(stmt); ) {
                createTableStatement.execute();
            }
        }
    }

    private void createUserInfoTable(DataSource pool) throws SQLException {
        // Safely attempts to create the user info table schema.
        try (Connection conn = pool.getConnection()) {
            String stmt =
                "CREATE TABLE IF NOT EXISTS user_info ( "
                    + "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, user_name TEXT, full_name TEXT,"
                    + "email TEXT, verified BOOLEAN, university_id INT REFERENCES university(id) );";
            try (PreparedStatement createTableStatement = conn.prepareStatement(stmt); ) {
                createTableStatement.execute();
            }
        }
    }
    
    private void createStudySetTable(DataSource pool) throws SQLException {
        // Safely attempts to create the study set table schema.
        try (Connection conn = pool.getConnection()) {
            String stmt =
                "CREATE TABLE IF NOT EXISTS study_set ( "
                    + "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, owner_id INT REFERENCES user_info(id), title TEXT,"
                    + "description TEXT, university_id INT REFERENCES university(id),  professor TEXT,"
                    + "academic_time_period TEXT, course_name TEXT, creation_time DATE, update_time DATE);";
            try (PreparedStatement createTableStatement = conn.prepareStatement(stmt); ) {
                createTableStatement.execute();
            }
        }
    }

    private void createCardTable(DataSource pool) throws SQLException {
        // Safely attempts to create the university table schema.
        try (Connection conn = pool.getConnection()) {
            String stmt =
                "CREATE TABLE IF NOT EXISTS card ( "
                    + "id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, study_set_id INT REFERENCES study_set(id),"
                    + "front TEXT, back TEXT );";
            try (PreparedStatement createTableStatement = conn.prepareStatement(stmt); ) {
                createTableStatement.execute();
            }
        }
    }


    @Override
    public void contextDestroyed(ServletContextEvent event) {
        // This function is called when the Servlet is destroyed.
        HikariDataSource pool = (HikariDataSource) event.getServletContext().getAttribute("my-pool");
        if (pool != null) {
            pool.close();
        }
    }

    @Override
    public void contextInitialized(ServletContextEvent event) {
        // This function is called when the application starts and will safely create a connection pool
        // that can be used to connect to.
        ServletContext servletContext = event.getServletContext();
        DataSource pool = (DataSource) servletContext.getAttribute("my-pool");
        if (pool == null) {
            pool = createConnectionPool();
            servletContext.setAttribute("my-pool", pool);
        }
        //After the connection pool has been set up, we try to create our tables in the database.
        //First, university table:
        try {
            createUniversityTable(pool);
        } catch (SQLException ex) {
            throw new RuntimeException(
                "Unable to verify the university table schema. Please double check the steps"
                    + "in the README, your table declaration method  and try again.",
                ex);
        }

        //Next, user_info table:
        try {
            createUserInfoTable(pool);
        } catch (SQLException ex) {
            throw new RuntimeException(
                "Unable to verify the user_info table schema. Please double check the steps"
                    + "in the README, your table declaration method  and try again.",
                ex);
        }

        //Next, study_set table:
        try {
            createStudySetTable(pool);
        } catch (SQLException ex) {
            throw new RuntimeException(
                "Unable to verify the study_set table schema. Please double check the steps"
                    + "in the README, your table declaration method  and try again.",
                ex);
        }

        //Finally, the card table:
        try {
            createCardTable(pool);
        } catch (SQLException ex) {
            throw new RuntimeException(
                "Unable to verify the card table schema. Please double check the steps"
                    + "in the README, your table declaration method  and try again.",
                ex);
        }
    }
}